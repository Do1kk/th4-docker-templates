version: '3.8'
services:
  nginx:
    container_name: nginx
    hostname: nginx
    image: nginx:1.21.4
    ports:
      - 80:80
      - 443:443
      - 2443:2443
      - 8765:8765
    networks:
      - proxy
    volumes:
      - ./vol/nginx:/etc/nginx/conf.d
      - ./vol/ssl:/etc/ssl
    restart: unless-stopped

  elasticsearch:
    image: 'elasticsearch:7.16.1'
    container_name: elasticsearch
    hostname: elasticsearch
    restart: unless-stopped
    environment:
      - http.host=0.0.0.0
      - discovery.type=single-node
      - cluster.name=hive
      - script.allowed_types= inline,stored
      - thread_pool.search.queue_size=100000
      - thread_pool.write.queue_size=10000
      - gateway.recover_after_nodes=1
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms128m -Xmx128m # min 128m
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - './vol/elasticsearch/data:/usr/share/elasticsearch/data'
      - './vol/elasticsearch/logs:/usr/share/elasticsearch/logs'
    networks:
      - th4
      - es
  cortex:
    image: 'thehiveproject/cortex:3.1.3-withdeps'
    container_name: cortex
    restart: unless-stopped
    command:
      --job-directory ${JOB_DIRECTORY}
    environment:
      - 'JOB_DIRECTORY=${JOB_DIRECTORY}'
    volumes:
      - './vol/cortex/application.conf:/etc/cortex/application.conf'
      - '${JOB_DIRECTORY}:${JOB_DIRECTORY}'
      - '/var/run/docker.sock:/var/run/docker.sock'
    depends_on:
      - elasticsearch
    networks:
      - es
      - proxy
      - th4

  postgres:
    image: postgres:alpine3.14
    container_name: PostgresDB
    restart: unless-stopped
    environment:
      - 'POSTGRES_USER=${POSTGRES_USER}'
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
      - 'POSTGRES_DB=${POSTGRES_DB}'
    volumes:
      - './vol/postgres/data:/var/lib/postgresql/data'
    networks:
      - n8n-net
  n8n:
    image: n8nio/n8n:0.130.0
    container_name: n8n
    restart: unless-stopped
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - 'DB_POSTGRESDB_DATABASE=${POSTGRES_DB}'
      - 'DB_POSTGRESDB_USER=${POSTGRES_USER}'
      - 'DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}'
      - 'N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE}'
      - 'N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}'
      - 'N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}'
    links:
      - postgres
    volumes:
      - './vol/n8n/.n8n:/root/.n8n'
      - './vol/n8n/workflows:/opt/workflows'
    networks:
      - n8n-net
      - proxy
    command: n8n start

  cass1:
    image: 'cassandra:4.0.1'
    container_name: cass1
    restart: unless-stopped
    hostname: cass1 # now we can write this name in thehive confguration insted of ip that is randomly created
    healthcheck: &healthcheck
#        test: ["CMD", "cqlsh", "-e", "describe keyspaces" ] # without cridentials
        test: ["CMD", "cqlsh", "-u", "${CASSANDRA_USER}", "-p", "${CASSANDRA_PASS}", "-e", "describe keyspaces" ]
        interval: 10s # domyślnie 5s
        timeout: 10s # domyślnie 5s
        retries: 10 # domyślnie 60
    environment:
      CASSANDRA_SEEDS: "cass1,cass2"    # The first two nodes will be seeds
      MAX_HEAP_SIZE: 1100M # min 256M
      HEAP_NEWSIZE: 200M
      CASSANDRA_CLUSTER_NAME: thp
      CASSANDRA_NUM_TOKENS: 128  # Virtual nodes. Machine with fewer resources could be configured to support a smaller number of virtual nodes.
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch  # Topology information that the replication strategy uses to place replicas.     
      CASSANDRA_DC: test_DC
      CASSANDRA_RACK: RACK1  # Cassandra do not have more than one replica on the same rack.
      CASSANDRA_START_RPC: 'true'
    volumes:
      - './vol/cass1/data:/var/lib/cassandra/data'
      - './vol/cass1/cassandra.yaml:/etc/cassandra/cassandra.yaml'
      - './vol/cert:/etc/cert' # folder with certificates for client and server encryption
    networks:
      - th4

  cass2:
    image: 'cassandra:4.0.1'
    container_name: cass2
    restart: unless-stopped
    hostname: cass2
    healthcheck: *healthcheck
    environment: 
      CASSANDRA_SEEDS: "cass1,cass2"    # The first two nodes will be seeds
      MAX_HEAP_SIZE: 1100M # min 256M
      HEAP_NEWSIZE: 200M
      CASSANDRA_CLUSTER_NAME: thp
      CASSANDRA_NUM_TOKENS: 128
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
      CASSANDRA_DC: test_DC
      CASSANDRA_RACK: RACK2
      CASSANDRA_START_RPC: 'true'
    volumes:
      - './vol/cass2/data:/var/lib/cassandra/data'
      - './vol/cass2/cassandra.yaml:/etc/cassandra/cassandra.yaml'
      - './vol/cert:/etc/cert'
    networks:
      - th4
    depends_on:
      cass1: # start cass2 only after cass1 is healthy
        condition: service_healthy

  cass3:
    image: 'cassandra:4.0.1'
    container_name: cass3
    restart: unless-stopped
    hostname: cass3
    healthcheck: *healthcheck
    environment: 
      CASSANDRA_SEEDS: "cass1,cass2"    # The first two nodes will be seeds
      MAX_HEAP_SIZE: 1100M # min 256M
      HEAP_NEWSIZE: 200M
      CASSANDRA_CLUSTER_NAME: thp
      CASSANDRA_NUM_TOKENS: 128
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
      CASSANDRA_DC: test_DC
      CASSANDRA_RACK: RACK3
      CASSANDRA_START_RPC: 'true'
    volumes:
      - './vol/cass3/data:/var/lib/cassandra/data'
      - './vol/cass3/cassandra.yaml:/etc/cassandra/cassandra.yaml'
      - './vol/cert:/etc/cert'
    networks:
      - th4
    depends_on:
      cass2: # start cass3 only after cass2 is healthy
        condition: service_healthy

  thehive:
    image: 'thehiveproject/thehive4:4.1.15'
    container_name: 'thehive4'
    restart: unless-stopped
    depends_on:
      - cass1
      - cass2
      - cass3
    volumes:
      - './vol/thehive/application.conf:/etc/thehive/application.conf'
      - './vol/thehive/db:/opt/thp/thehive/db'
      - './vol/thehive/data:/opt/thp/thehive/data'
      - './vol/thehive/index:/opt/thp/thehive/index'
      - './vol/cert:/etc/cert'
    networks:
      - proxy
      - backend
      - n8n-net
    command: '--no-config --no-config-secret'
networks:
  n8n-net: null
  th4: null
  es: null
  proxy:
    external: true
